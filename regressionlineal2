import pandas as pd
import numpy as np

dataset = pd.read_csv("https://raw.githubusercontent.com/Shuhiro/Excel/main/Auto.csv")
dataset.head()

x = dataset.iloc[:,[4,5]].values   # tomamos los hijos y su ingreso
y =[]
for index in dataset.AUTO:
  if(index == "Si"):
    y.append(1)
  elif(index == "No"):
    y.append(0)
    
from sklearn.model_selection import train_test_split
x_train, x_test, y_train, y_test = train_test_split(x,y,test_size = 0.2, random_state = 0)

from sklearn.preprocessing import StandardScaler
standard_x = StandardScaler()
x_train = standard_x.fit_transform(x_train)
x_test = standard_x.fit_transform(x_test)

#x_train,x_test

#Ajuste del modelo
from sklearn.linear_model import LogisticRegression
reg = LogisticRegression(random_state = 0) #random_state=0 semilla
reg.fit(x_train,y_train)

#Predicción
pred = reg.predict(x_test)

#Matriz de confusión
from sklearn.metrics import confusion_matrix
conf_mat = confusion_matrix(y_test,pred)
conf_mat

#aciertos| desaciertos

12/len(y_test)

GRAFICO
from matplotlib.colors import ListedColormap
import matplotlib.pyplot as plt
X_set, y_set = x_train, y_train
X1, X2 = np.meshgrid(np.arange(start = X_set[:, 0].min() - 1, stop = X_set[:, 0].max() + 1, step = 0.01),
                     np.arange(start = X_set[:, 1].min() - 1, stop = X_set[:, 1].max() + 1, step = 0.01))
plt.contourf(X1, X2, reg.predict(np.array([X1.ravel(), X2.ravel()]).T).reshape(X1.shape),
             alpha = 0.75, cmap = ListedColormap(('red', 'green')))
plt.xlim(X1.min(), X1.max())
plt.ylim(X2.min(), X2.max())
for i, j in enumerate(np.unique(y_set)):
    plt.scatter(X_set[y_set == j, 0], X_set[y_set == j, 1],
                c = ListedColormap(('blue', 'black'))(i), label = j)
plt.title('Training')
plt.xlabel('Hijos')
plt.ylabel('Ingresos')
plt.legend()
plt.show()
#0 significa que NO TIENE AUTO y 1 significa que SI TIENE AUTO
