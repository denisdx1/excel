import pandas as pd
import numpy as np

dataset1 = pd.read_csv("https://raw.githubusercontent.com/Shuhiro/Excel/main/Billete.csv")
dataset1.head()

np.average(dataset1.clase)  #promedio de clase

x = dataset1.iloc[:,[2,3]].values   # tomamos la curtosis y el salario entropia
y = dataset1.iloc[:,4].values  #clase

from sklearn.model_selection import train_test_split
x_train1, x_test1, y_train1, y_test1 = train_test_split(x,y,test_size = 0.25, random_state = 5)

from sklearn.preprocessing import StandardScaler
standard_x = StandardScaler()
x_train1 = standard_x.fit_transform(x_train1)
x_test1 = standard_x.fit_transform(x_test1)

#Ajuste del modelo
from sklearn.linear_model import LogisticRegression
reg = LogisticRegression(random_state =5) #random_state=4 semilla
reg.fit(x_train1,y_train1)

#Predicción
pred1 = reg.predict(x_test1)

pred1,y_test1  #comparamos la predicion con el valor y_test, el valor no esta sobreajustado

#Matriz de confusión
from sklearn.metrics import confusion_matrix
conf_mat1 = confusion_matrix(y_test1,pred1)
conf_mat1

#aciertos| desaciertos 

//GRAFICO

from matplotlib.colors import ListedColormap
import matplotlib.pyplot as plt
X_set1, y_set1 = x_train1, y_train1
X1, X2 = np.meshgrid(np.arange(start = X_set1[:, 0].min() - 1, stop = X_set1[:, 0].max() + 1, step = 0.01),
                     np.arange(start = X_set1[:, 1].min() - 1, stop = X_set1[:, 1].max() + 1, step = 0.01))
plt.contourf(X1, X2, reg.predict(np.array([X1.ravel(), X2.ravel()]).T).reshape(X1.shape),
             alpha = 0.75, cmap = ListedColormap(('red', 'purple')))
plt.xlim(X1.min(), X1.max())
plt.ylim(X2.min(), X2.max())
for i, j in enumerate(np.unique(y_set1)):
    plt.scatter(X_set1[y_set1 == j, 0], X_set1[y_set1 == j, 1],
                c = ListedColormap(('blue', 'black'))(i), label = j)
plt.title('Training')
plt.xlabel('Curtosis')
plt.ylabel('Entropia')
plt.legend()
plt.show()
